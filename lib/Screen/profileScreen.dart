import 'dart:async';import 'dart:convert';import 'package:auto_size_text/auto_size_text.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:icons_plus/icons_plus.dart';import 'package:japaneseapp/Config/FunctionService.dart';import 'package:japaneseapp/Config/dataHelper.dart';import 'package:shared_preferences/shared_preferences.dart';class profileScreen extends StatefulWidget {  @override  State<StatefulWidget> createState() => _profileScreen();}class _profileScreen extends State<profileScreen> {  final List<String> weekdays = ["M", "T", "W", "T", "F", "S", "S"];  int amountTopicComplite = 0;  bool isLoading = false;  List<Map<String, String>> getWeekDays() {    DateTime today = DateTime.now();    int currentWeekday = today.weekday; // 1 = Thứ Hai, ..., 7 = Chủ Nhật    DateTime monday =        today.subtract(Duration(days: currentWeekday - 1)); // Lùi về Thứ Hai    List<Map<String, String>> days = [];    for (int i = 0; i < 7; i++) {      DateTime date = monday.add(Duration(days: i));      String formattedDate = date.day.toString().padLeft(2, '0');      String weekday = weekdays[i];      days.add({"date": formattedDate, "weekday": weekday});    }    return days;  }  List<Map<String, String>> getWeekDayMothYears() {    DateTime today = DateTime.now();    int currentWeekday = today.weekday; // 1 = Thứ Hai, ..., 7 = Chủ Nhật    DateTime monday =        today.subtract(Duration(days: currentWeekday - 1)); // Lùi về Thứ Hai    List<Map<String, String>> days = [];    for (int i = 0; i < 7; i++) {      DateTime date = monday.add(Duration(days: i));      String formattedDate =          "${date.day.toString().padLeft(2, '0')}/${date.month.toString().padLeft(2, '0')}/${date.year.toString()}";      String weekday = weekdays[i];      days.add({"date": formattedDate, "weekday": weekday});    }    print(days);    return days;  }  Future<Map<String, dynamic>> getData() async {    final SharedPreferences prefs = await SharedPreferences.getInstance();    amountTopicComplite = await FunctionService.getTopicComplite();    //FirebaseAuth.instance.signOut();    User user = FirebaseAuth.instance.currentUser!;    return {      "level": prefs.getInt("level"),      "exp": prefs.getInt("exp"),      "nextExp": prefs.getInt("nextExp"),      "Streak": prefs.getStringList("checkInHistoryTreak")!.length,      "lastCheckIn": prefs.getString("lastCheckIn"),      "checkInHistory": prefs.getStringList("checkInHistory"),      "checkInHistoryTreak": prefs.getStringList("checkInHistoryTreak"),      "achivement": prefs.getStringList("achivement"),      "providerID": user.providerData[0].providerId,      "mail": user.email    };  }  String getTitle(int level) {    if (level < 10) {      return "Học Sĩ";    } else if (level < 20) {      return "Minh Triết Giả";    } else if (level < 30) {      return "Tư Tưởng Gia";    } else if (level < 40) {      return "Bác Học Tôn Giả";    } else if (level < 50) {      return "Hàn Lâm Học Sĩ";    } else if (level < 60) {      return "Kỳ Tài Văn Học";    } else if (level < 70) {      return "Trí Thánh Nhân";    } else if (level < 80) {      return "Thiên Tài Biện Luận";    } else if (level < 90) {      return "Học Đạo Tinh Thông";    } else if (level < 100) {      return "Chí Sĩ Văn Nhân";    } else if (level < 110) {      return "Luyện Tư Học Sĩ";    } else if (level < 120) {      return "Thông Tuệ Giả";    } else if (level < 130) {      return "Hiền Triết Uyên Thâm";    } else if (level < 150) {      return "Văn Nhã Chân Nhân";    } else {      return "Trí Nhân Kỳ Tài";    }  }  String getImage(int level) {    if (level < 10) {      return "assets/StateLevel/state1.png";    } else if (level < 20) {      return "assets/StateLevel/state2.png";    } else if (level < 30) {      return "assets/StateLevel/state3.png";    } else if (level < 40) {      return "assets/StateLevel/state4.png";    } else if (level < 50) {      return "assets/StateLevel/state5.png";    } else if (level < 60) {      return "assets/StateLevel/state6.png";    } else if (level < 70) {      return "assets/StateLevel/state7.png";    } else if (level < 80) {      return "assets/StateLevel/state8.png";    } else if (level < 90) {      return "assets/StateLevel/state9.png";    } else if (level < 100) {      return "assets/StateLevel/state10.png";    } else if (level < 110) {      return "assets/StateLevel/state11.png";    } else if (level < 120) {      return "assets/StateLevel/state12.png";    } else if (level < 130) {      return "assets/StateLevel/state13.png";    } else if (level < 150) {      return "assets/StateLevel/state14.png";    } else {      return "assets/StateLevel/state15.png";    }  }  bool checkStreak(int userStreak, int streak){    return userStreak >= streak;  }  bool checkAchivement(Map<String, dynamic> data, String achivement){    return (data["achivement"] as List<String>).contains(achivement);  }  Future<void> synchronyData() async {    setState(() {      isLoading = true;    });    DatabaseHelper db = DatabaseHelper.instance;    // Get SharedPreferences    final SharedPreferences prefs = await SharedPreferences.getInstance();    Map<String, dynamic> dataPrefs = {      "level": prefs.getInt("level"),      "exp": prefs.getInt("exp"),      "nextExp": prefs.getInt("nextExp"),      "Streak": prefs.getStringList("checkInHistoryTreak")!.length,      "lastCheckIn": prefs.getString("lastCheckIn"),      "checkInHistory": prefs.getStringList("checkInHistory"),      "checkInHistoryTreak": prefs.getStringList("checkInHistoryTreak"),      "achivement": prefs.getStringList("achivement"),    };    // Fetch synchrony data from local database    List<String> dataAsynchronyData = [];    dataAsynchronyData.add((await db.getAllSynchronyData()));    dataAsynchronyData.add(jsonEncode(dataPrefs));    try {      // Get Firestore instance      var userDoc = FirebaseFirestore.instance.collection("datas").doc(FirebaseAuth.instance.currentUser!.uid);      // Check if the document already exists      var docSnapshot = await userDoc.get();      if (docSnapshot.exists) {        // If data already exists, clear it first        await userDoc.update({          'data': FieldValue.delete(), // This deletes the existing 'data' field        });        print("Existing data cleared");      }      // Now write the new data      await userDoc.set({        'data': dataAsynchronyData      }, SetOptions(merge: true)); // This ensures that existing fields are not removed, just updated.      setState(() {        isLoading = false;      });      showDialogPushDataSuccess(context);    } catch (e) {      print("Error synchronizing data: $e");    }  }  Future<void> UpdateAsynchronyData() async {    DatabaseHelper db = DatabaseHelper.instance;    final SharedPreferences prefs = await SharedPreferences.getInstance();    setState(() {      isLoading = true;    });    try {      // Get the Firestore instance      var userDoc = FirebaseFirestore.instance.collection("datas").doc(FirebaseAuth.instance.currentUser!.uid);      // Get the document snapshot      var docSnapshot = await userDoc.get();      // Check if the document exists      if (docSnapshot.exists) {        // Document exists, retrieve the data        var data = docSnapshot.data(); // This will return a Map<String, dynamic> with the document data        String dataInDatabase = data!["data"][0];        await db.importSynchronyData(dataInDatabase);        Map<String, dynamic> dataPrefs = jsonDecode(data["data"][1]);        print(dataPrefs);        await prefs.clear();        await prefs.setInt("level", dataPrefs["level"]);        await prefs.setInt("exp", dataPrefs["exp"]);        await prefs.setInt("nextExp", dataPrefs["nextExp"]);        await prefs.setInt("Streak", dataPrefs["Streak"]);        await prefs.setString("lastCheckIn", dataPrefs["lastCheckIn"]);        await prefs.setStringList("checkInHistory", _convertToListString(dataPrefs["checkInHistory"]));        await prefs.setStringList("checkInHistoryTreak", _convertToListString(dataPrefs["checkInHistoryTreak"]));        await prefs.setStringList("achivement", _convertToListString(dataPrefs["achivement"]));        userDoc.delete();        showDialogAsynchronySuccess(context);      } else {        showDialogDownloadDataFail(context);      }    } catch (e) {      print("Error retrieving data: $e");    }    setState(() {      isLoading = false;    });  }  List<String> _convertToListString(dynamic list) {    if (list == null) return [];    return List<String>.from(list.map((item) => item.toString()));  }  void showDialogAchivementInfor(BuildContext ctx, String title, String description, String image){    showDialog(      barrierDismissible: true,      context: context,      builder: (BuildContext context) {        return Dialog(          backgroundColor: Colors.white,          shape: const RoundedRectangleBorder(            borderRadius: BorderRadius.only(              bottomLeft: Radius.circular(10),              bottomRight: Radius.circular(10),            ), // Bo góc popup          ),          child: StatefulBuilder(            builder: (BuildContext context, void Function(void Function()) setState) {              return Container(                width: MediaQuery.sizeOf(context).width*0.8,                decoration: const BoxDecoration(                  border: Border(                    top: BorderSide(                      color: Color.fromRGBO(20, 195, 142, 1.0), // Màu xanh cạnh trên ngoài cùng                      width: 10.0, // Độ dày của cạnh trên                    ),                  ),                ),                child: Stack(                  children: [                    Container(                      width: MediaQuery.sizeOf(context).width*0.8,                      child: Column(                        mainAxisSize: MainAxisSize.min,                        mainAxisAlignment: MainAxisAlignment.center,                        children: [                           Padding(                            padding: const EdgeInsets.only(left: 16, right: 16, top: 5),                            child: Text(                              title,                              style: TextStyle(fontSize: MediaQuery.sizeOf(context).width*0.06, fontFamily: "Itim", fontWeight: FontWeight.bold),                              textAlign: TextAlign.center,                            ),                          ),                            Image.asset(image, width: MediaQuery.sizeOf(context).width*0.4),                           Padding(                            padding: const EdgeInsets.only(left: 16, right: 16, top: 5),                            child: Text(                              description,                              style: TextStyle(fontSize: MediaQuery.sizeOf(context).width*0.04, fontFamily: "Itim"),                              textAlign: TextAlign.center,                            ),                          ),                          const SizedBox(height: 20),                        ],                      ),                    )                  ],                ),              );            },          ),        );      },    );  }  void showDialogSignOut(BuildContext ctx){    showDialog(      barrierDismissible: true,      context: context,      builder: (BuildContext context) {        return Dialog(          backgroundColor: Colors.white,          shape: const RoundedRectangleBorder(            borderRadius: BorderRadius.only(              bottomLeft: Radius.circular(10),              bottomRight: Radius.circular(10),            ), // Bo góc popup          ),          child: StatefulBuilder(            builder: (BuildContext context, void Function(void Function()) setState) {              return Container(                width: MediaQuery.sizeOf(context).width*0.8,                decoration: const BoxDecoration(                  border: Border(                    top: BorderSide(                      color: Color.fromRGBO(20, 195, 142, 1.0), // Màu xanh cạnh trên ngoài cùng                      width: 10.0, // Độ dày của cạnh trên                    ),                  ),                ),                child: Stack(                  children: [                    Container(                      width: MediaQuery.sizeOf(context).width*0.8,                      child: Column(                        mainAxisSize: MainAxisSize.min,                        mainAxisAlignment: MainAxisAlignment.center,                        children: [                          Padding(                            padding: const EdgeInsets.only(left: 16, right: 16, top: 5),                            child: Text(                              "Đăng xuất khỏi tài khoản của bạn?",                              style: TextStyle(fontSize: MediaQuery.sizeOf(context).width*0.045, fontFamily: "Itim"),                              textAlign: TextAlign.center,                            ),                          ),                          const SizedBox(height: 10,),                          Row(                            mainAxisAlignment: MainAxisAlignment.end,                            children: [                              GestureDetector(                                onTap: (){},                                child: const Text("Hủy", style: TextStyle(fontSize: 15),),                              ),                              SizedBox(width: 20),                              GestureDetector(                                onTap: (){                                  FirebaseAuth.instance.signOut();                                  Navigator.of(context).pop();                                },                                child: Text("Đăng Xuất", style: TextStyle(color: Colors.red, fontSize: 15),),                              ),                              SizedBox(width: 20)                            ],                          ),                          const SizedBox(height: 20),                        ],                      ),                    )                  ],                ),              );            },          ),        );      },    );  }  void showCustomDialog(BuildContext context, String title, String message, Color borderColor) {    showDialog(      barrierDismissible: true,      context: context,      builder: (BuildContext context) {        return Dialog(          backgroundColor: Colors.white,          shape: const RoundedRectangleBorder(            borderRadius: BorderRadius.only(              bottomLeft: Radius.circular(10),              bottomRight: Radius.circular(10),            ),          ),          child: StatefulBuilder(            builder: (BuildContext context, void Function(void Function()) setState) {              return Container(                width: MediaQuery.sizeOf(context).width * 0.8,                decoration: BoxDecoration(                  border: Border(                    top: BorderSide(                      color: borderColor,                      width: 10.0,                    ),                  ),                ),                child: Column(                  mainAxisSize: MainAxisSize.min,                  mainAxisAlignment: MainAxisAlignment.center,                  children: [                    Padding(                      padding: const EdgeInsets.only(left: 16, right: 16, top: 5),                      child: Text(                        title,                        style: TextStyle(fontSize: MediaQuery.sizeOf(context).width * 0.045, fontFamily: "Itim"),                        textAlign: TextAlign.center,                      ),                    ),                    const SizedBox(height: 10),                    Padding(                      padding: const EdgeInsets.symmetric(horizontal: 16.0),                      child: Text(                        message,                        style: TextStyle(fontSize: MediaQuery.sizeOf(context).width * 0.04, fontFamily: "Itim"),                        textAlign: TextAlign.center,                      ),                    ),                    const SizedBox(height: 10),                    Row(                      mainAxisAlignment: MainAxisAlignment.end,                      children: [                        GestureDetector(                          onTap: () {                            Navigator.of(context).pop();                          },                          child: Text(                            "Ok",                            style: TextStyle(color: Colors.black, fontSize: 15),                          ),                        ),                        SizedBox(width: 20)                      ],                    ),                    const SizedBox(height: 20),                  ],                ),              );            },          ),        );      },    );  }  void showDialogPushDataSuccess(BuildContext context) {    showCustomDialog(      context,      "Đồng Bộ Hóa Dữ Liệu Thành Công",      "Dữ liệu đã được đồng bộ hóa thành công.",      Color.fromRGBO(20, 195, 142, 1.0),    );  }  void showDialogDownloadDataFail(BuildContext context) {    showCustomDialog(      context,      "Lỗi Tải Dữ Liệu",      "Hiện không có bản đồng bộ hóa dữ liệu nào.",      Colors.red,    );  }  void showDialogAsynchronySuccess(BuildContext context) {    showCustomDialog(      context,      "Đồng Bộ Hóa Dữ Liệu Thành Công",      "Động bộ hóa dữ liệu thành công.",      Color.fromRGBO(20, 195, 142, 1.0),    );  }  @override  Widget build(BuildContext context) {    List<Map<String, String>> days = getWeekDays();    List<Map<String, String>> daymonthYears = getWeekDayMothYears();    DateTime today = DateTime.now();    String todayFormatted = "${today.day.toString().padLeft(2, '0')}";    List<int> topicMilestones = [1, 5, 10, 50, 100];    List<int> streakMilestones = [1, 5, 10, 20, 50];    List<Map<String, dynamic>> achievements = [      {        "title": "Cú Đêm Học Khuya",        "description": "Học từ lúc 0h đến 2 giờ sáng",        "key": "cudemhockhuya",        "image": ["assets/achivement/overnight.png", "assets/achivement/no-overnight.png"],        "check": (data) => checkAchivement(data, "cudemhockhuya"),      },      {        "title": "Tri Thức Chăm Chỉ",        "description": "Học từ lúc 4 đến 6 giờ sáng",        "key": "trithucdaysom",        "image": ["assets/achivement/earnly.png", "assets/achivement/no-earnly.png"],        "check": (data) => checkAchivement(data, "trithucdaysom"),      },      {        "title": "Hình Thành Thói Quen",        "description": "Học Liên Tiếp 28 ngày",        "key": "Streak",        "image": ["assets/achivement/Habitualrot.png", "assets/achivement/no-Habitualrot.png"],        "check": (data) => checkStreak(data["Streak"], 28),      }    ];        return Scaffold(        body: FutureBuilder(            future: getData(),            builder: (ctx, snapshot) {              if (snapshot.hasData) {                return Stack(                  children: [                    Container(                      height: MediaQuery.sizeOf(context).height,                      width: MediaQuery.sizeOf(context).width,                      color: Colors.white,                      child: SingleChildScrollView(                        scrollDirection: Axis.vertical,                        child: Column(                          children: [                            const SizedBox(                              height: 80,                            ),                            Row(                              mainAxisAlignment: MainAxisAlignment.spaceBetween,                              children: [                                Container(                                  width:  MediaQuery.sizeOf(context).width*0.4,                                  height: MediaQuery.sizeOf(context).width*0.5,                                  child: Stack(                                    alignment: Alignment.center,                                    children: [                                      // Container VIỀN (background)                                      // Container(                                      //   width: MediaQuery.sizeOf(context).width * 0.3,                                      //   height: MediaQuery.sizeOf(context).width * 0.5,                                      //   decoration: BoxDecoration(                                      //     borderRadius:                                      //     const BorderRadius.all(Radius.circular(20)),                                      //     border: Border.all(                                      //         width: 10, color: Colors.transparent),                                      //     image: const DecorationImage(                                      //       image: AssetImage(                                      //           'assets/textureBoder/textureStone.png'),                                      //       repeat: ImageRepeat.repeat, // Lặp texture                                      //     ),                                      //     boxShadow: const [                                      //       BoxShadow(                                      //         color: Colors.grey,                                      //         blurRadius: 20,                                      //         offset: Offset(4, 4),                                      //       ),                                      //     ],                                      //   ),                                      // ),                                      // Container NỘI DUNG (che phủ)                                      Container(                                          width: MediaQuery.sizeOf(context).width * 0.3,                                          height: MediaQuery.sizeOf(context).width * 0.47,                                          decoration: const BoxDecoration(                                              color: Colors.white, // Màu nền bên trong                                              borderRadius:                                              BorderRadius.all(Radius.circular(20)),                                              boxShadow: [                                                BoxShadow(                                                    color: Colors.grey,                                                    offset: Offset(2, 2),                                                    blurRadius: 4                                                )                                              ]                                          ),                                          child: Center(                                            child: Image.asset(                                              getImage(snapshot.data!["level"]),                                              width:                                              MediaQuery.sizeOf(context).width * 0.25,                                            ),                                          )),                                    ],                                  ),                                ),                                Container(                                    width: MediaQuery.sizeOf(context).width*0.6,                                    height: MediaQuery.sizeOf(context).width*0.5,                                    child: Padding(                                      padding: EdgeInsets.only(right: 10),                                      child: Column(                                        mainAxisAlignment: MainAxisAlignment.start,                                        crossAxisAlignment: CrossAxisAlignment.start,                                        children: [                                          SizedBox(height: 10,),                                          Container(                                            height: MediaQuery.sizeOf(context).width*0.08,                                            width: MediaQuery.sizeOf(context).width*0.8,                                            decoration: BoxDecoration(                                                border: Border.all(                                                    color: Colors.grey                                                ),                                                borderRadius: BorderRadius.all(Radius.circular(50))                                            ),                                            child: Row(                                              mainAxisAlignment: MainAxisAlignment.spaceBetween,                                              children: [                                                Padding(                                                  padding: EdgeInsets.only(left: 10),                                                  child: Container(                                                    width: MediaQuery.sizeOf(context).width * 0.40,                                                    child: Row(                                                      children: [                                                        Text("Le HuuDuy", style: TextStyle(fontFamily: "Itim", fontSize: 15, color: Colors.grey),),                                                        SizedBox(width: 10,),                                                        Icon(snapshot.data!["providerID"] == "facebook.com" ? Icons.facebook_outlined : Icons.mail, color: snapshot.data!["providerID"] == "facebook.com" ? Colors.blue : Colors.black,)                                                      ],                                                    ),                                                  ),                                                ),                                                Padding(                                                  padding: EdgeInsets.only(right: 20),                                                  child: Container(                                                    width: MediaQuery.sizeOf(context).width*0.02,                                                    child: Icon(Icons.edit, color: Colors.grey, size: 20,),                                                  ),                                                )                                              ],                                            ),                                          ),                                          SizedBox(height: 10,),                                          Container(                                            height: MediaQuery.sizeOf(context).width*0.08,                                            width: MediaQuery.sizeOf(context).width*0.8,                                            decoration: BoxDecoration(                                                border: Border.all(                                                    color: Colors.grey                                                ),                                                borderRadius: BorderRadius.all(Radius.circular(50))                                            ),                                            child: Row(                                              mainAxisAlignment: MainAxisAlignment.spaceBetween,                                              children: [                                                Padding(                                                  padding: EdgeInsets.only(left: 10),                                                  child: Text(snapshot.data!["mail"], style: TextStyle(fontFamily: "Itim", fontSize: 15, color: Colors.grey),),                                                ),                                              ],                                            ),                                          ),                                          SizedBox(height: 10,),                                          Row(                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,                                            children: [                                              Container(                                                width: MediaQuery.sizeOf(context).width*0.28,                                                height: MediaQuery.sizeOf(context).width*0.12,                                                decoration: BoxDecoration(                                                    border: Border.all(color: Colors.grey),                                                    borderRadius: BorderRadius.all(Radius.circular(15))                                                ),                                                child: Padding(                                                  padding: EdgeInsets.only(left: 5, right: 5),                                                  child: Row(                                                    children: [                                                      Image.asset("assets/star.png", height: MediaQuery.sizeOf(context).height*0.025,),                                                      SizedBox(width: MediaQuery.sizeOf(context).width*0.01,),                                                      Column(                                                        crossAxisAlignment: CrossAxisAlignment.start,                                                        mainAxisAlignment: MainAxisAlignment.center,                                                        children: [                                                          Text("${snapshot.data!["level"]}", style: TextStyle(color: Colors.green, fontFamily: "Itim")),                                                          Text("Bậc Tri Thức", style: TextStyle(color: Colors.grey, fontFamily: "Itim"),)                                                        ],                                                      )                                                    ],                                                  ),                                                ),                                              ),                                              Container(                                                  width: MediaQuery.sizeOf(context).width*0.28,                                                  height: MediaQuery.sizeOf(context).width*0.12,                                                  decoration: BoxDecoration(                                                      border: Border.all(color: Colors.grey),                                                      borderRadius: BorderRadius.all(Radius.circular(15))                                                  ),                                                  child: Padding(                                                    padding: EdgeInsets.only(left: 5, right: 5),                                                    child: Row(                                                      children: [                                                        Image.asset("assets/experience.png", height: MediaQuery.sizeOf(context).height*0.025,),                                                        SizedBox(width: MediaQuery.sizeOf(context).width*0.01,),                                                        Column(                                                          crossAxisAlignment: CrossAxisAlignment.start,                                                          mainAxisAlignment: MainAxisAlignment.center,                                                          children: [                                                            Text("${snapshot.data!["exp"]}/${snapshot.data!["nextExp"]}", style: TextStyle(color: Colors.green, fontFamily: "Itim")),                                                            Text("Kiến Thức", style: TextStyle(color: Colors.grey, fontFamily: "Itim"),)                                                          ],                                                        )                                                      ],                                                    ),                                                  )                                              )                                            ],                                          ),                                          SizedBox(height: 10),                                          Container(                                              width: MediaQuery.sizeOf(context).width,                                              height: MediaQuery.sizeOf(context).width*0.12,                                              decoration: BoxDecoration(                                                  border: Border.all(color: Colors.grey),                                                  borderRadius: BorderRadius.all(Radius.circular(15))                                              ),                                              child: Padding(                                                padding: EdgeInsets.only(left: 5, right: 5),                                                child: Row(                                                  children: [                                                    Image.asset("assets/tag.png", height: MediaQuery.sizeOf(context).height*0.03,),                                                    SizedBox(width: MediaQuery.sizeOf(context).width*0.01,),                                                    Column(                                                      crossAxisAlignment: CrossAxisAlignment.start,                                                      mainAxisAlignment: MainAxisAlignment.center,                                                      children: [                                                        Text("${getTitle(snapshot.data!["level"])}", style: TextStyle(color: Colors.black, fontFamily: "Itim", fontSize: 20)),                                                      ],                                                    )                                                  ],                                                ),                                              )                                          )                                        ],                                      ),                                    )                                ),                              ],                            ),                            SizedBox(                              height: 20,                            ),                            Divider(                              color: Colors.grey.shade300, // Màu của đường kẻ                              thickness: 5,                              // indent: MediaQuery.sizeOf(context).width,                              // endIndent: MediaQuery.sizeOf(context).width,// Độ dày                            ),                            const SizedBox(                              height: 20,                            ),                            Row(                              mainAxisAlignment: MainAxisAlignment.center,                              children: [                                Text("${snapshot.data!["Streak"]}",                                    style: TextStyle(                                        color: ((snapshot.data!["checkInHistory"]                                        as List<String>)                                            .contains(                                            "${today.day.toString().padLeft(2, '0')}/${today.month.toString().padLeft(2, '0')}/${today.year.toString()}"))                                            ? Colors.orange                                            : Colors.grey,                                        fontWeight: FontWeight.bold,                                        fontSize: 30)),                                Icon(                                  Icons.local_fire_department,                                  color: ((snapshot.data!["checkInHistory"]                                  as List<String>)                                      .contains(                                      "${today.day.toString().padLeft(2, '0')}/${today.month.toString().padLeft(2, '0')}/${today.year.toString()}"))                                      ? Colors.orange                                      : Colors.grey,                                  size: 50,                                )                              ],                            ),                            Text(                              "Tháng ${today.month.toString().padLeft(2, '0')} Năm ${today.year.toString()}",                              style: const TextStyle(                                  color: Colors.green,                                  fontWeight: FontWeight.bold,                                  fontSize: 20,                                  fontFamily: "Itim"                              ),                            ),                            Padding(                              padding: EdgeInsets.all(16),                              child: Column(                                children: [                                  // Hiển thị tên thứ (T2 -> CN)                                  Row(                                    mainAxisAlignment:                                    MainAxisAlignment.spaceBetween,                                    children: weekdays.map((day) {                                      return Expanded(                                        child: Center(                                          child: Text(                                            day,                                            style: const TextStyle(                                                fontSize: 20,                                                fontWeight: FontWeight.bold,                                                color: Colors.blue),                                          ),                                        ),                                      );                                    }).toList(),                                  ),                                  // Hiển thị ngày theo hàng ngang                                  GridView.builder(                                    shrinkWrap: true,                                    gridDelegate:                                    const SliverGridDelegateWithFixedCrossAxisCount(                                      crossAxisCount: 7, // 7 ô theo hàng ngang                                      childAspectRatio: 1.2, // Căn chỉnh tỉ lệ ô                                    ),                                    itemCount: days.length,                                    itemBuilder: (context, index) {                                      bool isToday =                                          days[index]["date"] == todayFormatted;                                      return Stack(                                        children: [                                          Container(                                            margin: EdgeInsets.all(4),                                            decoration: BoxDecoration(                                                border: Border.all(                                                    color: isToday                                                        ? Colors.black                                                        : Colors.black                                                        .withOpacity(0.0)),                                                borderRadius: BorderRadius.all(Radius.circular(10))                                            ),                                            child: Center(                                              child: Text(                                                days[index]["date"]!,                                                style: const TextStyle(                                                  color: Colors.black,                                                  fontSize: 18,                                                  fontWeight: FontWeight.bold,                                                ),                                              ),                                            ),                                          ),                                          if ((snapshot.data!["checkInHistory"]                                          as List<String>)                                              .contains(                                              daymonthYears[index]["date"]))                                            Text("🔥"),                                        ],                                      );                                    },                                  ),                                ],                              ),                            ),                            Divider(                              color: Colors.grey.shade300, // Màu của đường kẻ                              thickness: 5,                              // indent: MediaQuery.sizeOf(context).width,                              // endIndent: MediaQuery.sizeOf(context).width,// Độ dày                            ),                            const Text(                              "Học Tập",                              style: TextStyle(                                  color: Colors.green,                                  fontWeight: FontWeight.bold,                                  fontSize: 30,                                  fontFamily: "Itim"                              ),                            ),                            SizedBox(height: 10,),                            Padding(                              padding: const EdgeInsets.only(left: 10, right: 5),                              child: SingleChildScrollView(                                scrollDirection: Axis.horizontal,                                child: Row(                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,                                  children: achievements.map((achievement) {                                    String imagePath = achievement["check"](snapshot.data!)                                        ? achievement["image"][0]                                        : achievement["image"][1];                                    return GestureDetector(                                        onTap: () {                                          if (achievement.containsKey("description")) {                                            showDialogAchivementInfor(ctx, achievement["title"], achievement["description"], imagePath);                                          }                                        },                                        child: Padding(                                          padding: EdgeInsets.only(right: 10),                                          child: Column(                                            children: [                                              Image.asset(imagePath, scale: 3),                                              Text(                                                achievement["title"],                                                style: const TextStyle(                                                  color: Colors.black,                                                  fontSize: 20,                                                  fontFamily: "Itim",                                                ),                                              ),                                            ],                                          ),                                        )                                    );                                  }).toList(),                                ),                              ),                            ),                            Divider(                              color: Colors.grey.shade300, // Màu của đường kẻ                              thickness: 5,                              // indent: MediaQuery.sizeOf(context).width,                              // endIndent: MediaQuery.sizeOf(context).width,// Độ dày                            ),                            const Text(                              "Chuổi Ngày Học",                              style: TextStyle(                                  color: Colors.green,                                  fontWeight: FontWeight.bold,                                  fontSize: 30,                                  fontFamily: "Itim"                              ),                            ),                            SizedBox(height: 10,),                            Padding(                              padding: const EdgeInsets.only(left: 15, right: 5),                              child: SingleChildScrollView(                                scrollDirection: Axis.horizontal,                                child: Row(                                  children: streakMilestones.map((streak) {                                    String imagePath = checkStreak(snapshot.data!["Streak"], streak)                                        ? "assets/achivement/dayStreak/${streak}day.png"                                        : "assets/achivement/dayStreak/no-${streak}day.png";                                    return GestureDetector(                                      onTap: (){                                        showDialogAchivementInfor(ctx, "Chuỗi $streak ngày", "Nhận khi học liên tục $streak ngày", imagePath);                                      },                                      child: Padding(                                        padding: EdgeInsets.only(right: 20),                                        child: Column(                                          children: [                                            Image.asset(imagePath, scale: 14),                                            SizedBox(height: MediaQuery.sizeOf(context).width * 0.03),                                            Text(                                              "Chuỗi $streak ngày",                                              style: const TextStyle(                                                color: Colors.black,                                                fontSize: 20,                                                fontFamily: "Itim",                                              ),                                            ),                                          ],                                        ),                                      ),                                    );                                  }).toList(),                                ),                              ),                            ),                            Divider(                              color: Colors.grey.shade300, // Màu của đường kẻ                              thickness: 5,                              // indent: MediaQuery.sizeOf(context).width,                              // endIndent: MediaQuery.sizeOf(context).width,// Độ dày                            ),                            Column(                              mainAxisAlignment: MainAxisAlignment.center,                              children: [                                Row(                                  mainAxisAlignment: MainAxisAlignment.center,                                  children: [                                    Text(                                      "$amountTopicComplite",                                      style: const TextStyle(                                          color: Colors.blue,                                          fontWeight: FontWeight.bold,                                          fontSize: 40,                                          fontFamily: "Itim"                                      ),                                    ),                                    const Icon(Icons.water_drop_rounded, size: 50, color: Colors.blue,)                                  ],                                ),                                const Text(                                  "Topic Hoàn Thành",                                  style: TextStyle(                                      color: Colors.green,                                      fontWeight: FontWeight.bold,                                      fontSize: 30,                                      fontFamily: "Itim"                                  ),                                ),                              ],                            ),                            SizedBox(height: 10,),                            Padding(                              padding: const EdgeInsets.only(left: 15, right: 5),                              child: SingleChildScrollView(                                scrollDirection: Axis.horizontal,                                child: Row(                                  children: topicMilestones.map((topic) {                                    String imagePath = amountTopicComplite >= topic                                        ? "assets/achivement/finish/${topic}_finish.png"                                        : "assets/achivement/finish/no_${topic}_finish.png";                                    return GestureDetector(                                      onTap: () {                                        showDialogAchivementInfor(                                          ctx,                                          "$topic Topic",                                          "Nhận sau khi hoàn thành $topic topic",                                          imagePath,                                        );                                      },                                      child: Padding(                                        padding: const EdgeInsets.only(right: 20),                                        child: Column(                                          children: [                                            Image.asset(imagePath, scale: 11),                                            Text(                                              "$topic Topic",                                              style: const TextStyle(                                                color: Colors.black,                                                fontSize: 20,                                                fontFamily: "Itim",                                              ),                                            ),                                          ],                                        ),                                      ),                                    );                                  }).toList(),                                ),                              ),                            ),                            Divider(                              color: Colors.grey.shade300, // Màu của đường kẻ                              thickness: 5,                              // indent: MediaQuery.sizeOf(context).width,                              // endIndent: MediaQuery.sizeOf(context).width,// Độ dày                            ),                            SizedBox(height: 10,),                            GestureDetector(                              onTap: (){                                synchronyData();                              },                              child: Container(                                  width: MediaQuery.sizeOf(context).width*0.9,                                  height: MediaQuery.sizeOf(context).width*0.1,                                  decoration: const BoxDecoration(                                      color: Colors.white,                                      borderRadius: BorderRadius.all(Radius.circular(15)),                                      boxShadow: [                                        BoxShadow(                                            color: Colors.grey,                                            offset: Offset(2, 2),                                            blurRadius: 4                                        )                                      ]                                  ),                                  child: const Padding(                                    padding: EdgeInsets.only(left: 10),                                    child: Row(                                      children: [                                        Icon(Icons.sync, color: Colors.blue,),                                        SizedBox(width: 10,),                                        Text("Đồng Bộ Dữ Liệu", style: TextStyle(color: Colors.black, fontFamily: "Itim", fontWeight: FontWeight.bold, fontSize: 15),),                                      ],                                    ),                                  )                              ),                            ),                            SizedBox(height: 10,),                            GestureDetector(                              onTap: (){                                UpdateAsynchronyData();                              },                              child: Container(                                  width: MediaQuery.sizeOf(context).width*0.9,                                  height: MediaQuery.sizeOf(context).width*0.1,                                  decoration: const BoxDecoration(                                      color: Colors.white,                                      borderRadius: BorderRadius.all(Radius.circular(15)),                                      boxShadow: [                                        BoxShadow(                                            color: Colors.grey,                                            offset: Offset(2, 2),                                            blurRadius: 4                                        )                                      ]                                  ),                                  child: const Padding(                                    padding: EdgeInsets.only(left: 10),                                    child: Row(                                      children: [                                        Icon(Icons.download, color: Colors.red,),                                        SizedBox(width: 10,),                                        Text("Tải Đồng Bộ Dữ Liệu", style: TextStyle(color: Colors.black, fontFamily: "Itim", fontWeight: FontWeight.bold, fontSize: 15),),                                      ],                                    ),                                  )                              ),                            ),                            SizedBox(height: 10,),                            Divider(                              color: Colors.grey.shade300, // Màu của đường kẻ                              thickness: 5,                              // indent: MediaQuery.sizeOf(context).width,                              // endIndent: MediaQuery.sizeOf(context).width,// Độ dày                            ),                            SizedBox(height: 10,),                            GestureDetector(                              onTap: (){                                showDialogSignOut(context);                              },                              child: Container(                                width: MediaQuery.sizeOf(context).width*0.9,                                height: MediaQuery.sizeOf(context).width*0.08,                                decoration: BoxDecoration(                                  color: Colors.grey.shade300,                                  borderRadius: BorderRadius.all(Radius.circular(5)),                                ),                                child: Center(                                  child: Text("Đăng Xuất", style: TextStyle(color: Colors.black, fontFamily: "Itim", fontWeight: FontWeight.bold, fontSize: 15),),                                ),                              ),                            ),                            SizedBox(height: 50,),                          ],                        ),                      ),                    ),                    if(isLoading)                      Container(                        width: MediaQuery.sizeOf(context).width,                        height: MediaQuery.sizeOf(context).height,                        color: Colors.grey.withOpacity(0.5),                      ),                    if(isLoading)                      Center(                        child: Container(                          height: 80,                          width: 80,                          child: CircularProgressIndicator(color: Colors.green,),                        ),                      ),                  ],                );              }              print(snapshot.data);              return const Center();            }));  }}