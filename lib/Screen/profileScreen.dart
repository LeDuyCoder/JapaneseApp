import 'dart:async';import 'dart:convert';import 'package:auto_size_text/auto_size_text.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter_launcher_icons/logger.dart';import 'package:icons_plus/icons_plus.dart';import 'package:intl/intl.dart';import 'package:japaneseapp/Config/FunctionService.dart';import 'package:japaneseapp/Config/dataHelper.dart';import 'package:japaneseapp/Config/databaseServer.dart';import 'package:japaneseapp/Screen/settingScreen.dart';import 'package:japaneseapp/Theme/colors.dart';import 'package:japaneseapp/Utilities/NumberFormatter.dart';import 'package:shared_preferences/shared_preferences.dart';import '../generated/app_localizations.dart';class profileScreen extends StatefulWidget {  final Function(Locale _locale) changeLanguage;  const profileScreen({super.key, required this.changeLanguage});  @override  State<StatefulWidget> createState() => _profileScreen();}class _profileScreen extends State<profileScreen> {  final List<String> weekdays = ["M", "T", "W", "T", "F", "S", "S"];  List<Map<String, String>> getWeekDays() {    DateTime today = DateTime.now();    int currentWeekday = today.weekday; // 1 = Thứ Hai, ..., 7 = Chủ Nhật    DateTime monday =        today.subtract(Duration(days: currentWeekday - 1)); // Lùi về Thứ Hai    List<Map<String, String>> days = [];    for (int i = 0; i < 7; i++) {      DateTime date = monday.add(Duration(days: i));      String formattedDate = date.day.toString().padLeft(2, '0');      String weekday = weekdays[i];      days.add({"date": formattedDate, "weekday": weekday});    }    return days;  }  List<Map<String, String>> getWeekDayMothYears() {    DateTime today = DateTime.now();    int currentWeekday = today.weekday; // 1 = Thứ Hai, ..., 7 = Chủ Nhật    DateTime monday =        today.subtract(Duration(days: currentWeekday - 1)); // Lùi về Thứ Hai    List<Map<String, String>> days = [];    for (int i = 0; i < 7; i++) {      DateTime date = monday.add(Duration(days: i));      String formattedDate =          "${date.day.toString().padLeft(2, '0')}/${date.month.toString().padLeft(2, '0')}/${date.year.toString()}";      String weekday = weekdays[i];      days.add({"date": formattedDate, "weekday": weekday});    }    print(days);    return days;  }  Future<Map<String, dynamic>> getData() async {    final SharedPreferences prefs = await SharedPreferences.getInstance();    final DatabaseHelper db = await DatabaseHelper.instance;    final DatabaseServer databaseServer = new DatabaseServer();    User user = FirebaseAuth.instance.currentUser!;    return {      "level": prefs.getInt("level"),      "exp": prefs.getInt("exp"),      "nextExp": prefs.getInt("nextExp"),      "Streak": prefs.getStringList("checkInHistoryTreak")!.length,      "lastCheckIn": prefs.getString("lastCheckIn"),      "checkInHistory": prefs.getStringList("checkInHistory"),      "checkInHistoryTreak": prefs.getStringList("checkInHistoryTreak"),      "achivement": prefs.getStringList("achivement"),      "providerID": user.providerData[0].providerId,      "displayName": user.providerData[0].displayName,      "mail": user.email,      "countTopic": (await db.getAllTopic()).length,      "coin": await databaseServer.getCoin(user.uid)    };  }  String getTitle(int level) {    if (level < 10) {      return AppLocalizations.of(context)!.levelTitles_1;    } else if (level < 20) {      return AppLocalizations.of(context)!.levelTitles_2;    } else if (level < 30) {      return AppLocalizations.of(context)!.levelTitles_3;    } else if (level < 40) {      return AppLocalizations.of(context)!.levelTitles_4;    } else if (level < 50) {      return AppLocalizations.of(context)!.levelTitles_5;    } else if (level < 60) {      return AppLocalizations.of(context)!.levelTitles_6;    } else if (level < 70) {      return AppLocalizations.of(context)!.levelTitles_7;    } else if (level < 80) {      return AppLocalizations.of(context)!.levelTitles_8;    } else if (level < 90) {      return AppLocalizations.of(context)!.levelTitles_9;    } else if (level < 100) {      return AppLocalizations.of(context)!.levelTitles_10;    } else if (level < 110) {      return AppLocalizations.of(context)!.levelTitles_11;    } else if (level < 120) {      return AppLocalizations.of(context)!.levelTitles_12;    } else if (level < 130) {      return AppLocalizations.of(context)!.levelTitles_13;    } else if (level < 150) {      return AppLocalizations.of(context)!.levelTitles_14;    } else {      return AppLocalizations.of(context)!.levelTitles_15;    }  }  String getImage(int level) {    if (level < 10) {      return "assets/StateLevel/state1.png";    } else if (level < 20) {      return "assets/StateLevel/state3.png";    } else if (level < 30) {      return "assets/StateLevel/state3.png";    } else if (level < 40) {      return "assets/StateLevel/state4.png";    } else if (level < 50) {      return "assets/StateLevel/state5.png";    } else if (level < 60) {      return "assets/StateLevel/state6.png";    } else if (level < 70) {      return "assets/StateLevel/state7.png";    } else if (level < 80) {      return "assets/StateLevel/state8.png";    } else if (level < 90) {      return "assets/StateLevel/state9.png";    } else if (level < 100) {      return "assets/StateLevel/state10.png";    } else if (level < 110) {      return "assets/StateLevel/state11.png";    } else if (level < 120) {      return "assets/StateLevel/state12.png";    } else if (level < 130) {      return "assets/StateLevel/state13.png";    } else if (level < 150) {      return "assets/StateLevel/state14.png";    } else {      return "assets/StateLevel/state15.png";    }  }  bool checkStreak(int userStreak, int streak){    return userStreak >= streak;  }  @override  Widget build(BuildContext context) {    List<Map<String, String>> days = getWeekDays();    List<Map<String, String>> daymonthYears = getWeekDayMothYears();    DateTime today = DateTime.now();    String todayFormatted = "${today.day.toString().padLeft(2, '0')}";    return WillPopScope(child: Scaffold(        body: FutureBuilder(future: getData(), builder: (context, snapshot) {          if (snapshot.connectionState == ConnectionState.waiting) {            return Center(              child: Container(                height: 100,                width: 100,                child: const CircularProgressIndicator(                  color: Colors.green,                ),              ),            );          }          if (!snapshot.hasData) {            return Center(              child: Container(                  height: MediaQuery.sizeOf(context).width * 0.8,                  child: Image.asset("assets/404.png")),            );          }          return Container(            width: MediaQuery.sizeOf(context).width,            height: MediaQuery.sizeOf(context).height,            color: Color(0xFFFFA2B1),            child: Stack(              children: [                Container(                  width: MediaQuery.sizeOf(context).width,                  child: Column(                    crossAxisAlignment: CrossAxisAlignment.end,                    children: [                      SizedBox(height: 100,),                      Image.asset(                        getImage(snapshot.data!["level"] ?? 1),                        width: MediaQuery.sizeOf(context).width/2,                        fit: BoxFit.fitWidth,                      ),                    ],                  ),                ),                Container(                  width: MediaQuery.sizeOf(context).width,                  height: MediaQuery.sizeOf(context).height/2.5,                  child: Column(                    crossAxisAlignment: CrossAxisAlignment.start,                    mainAxisAlignment: MainAxisAlignment.center,                    children: [                      Padding(                          padding: EdgeInsets.only(left: MediaQuery.sizeOf(context).width/5),                          child: Column(                            children: [                              Text("${snapshot.data!["level"]}", style: TextStyle(color: AppColors.primary, fontSize: 80, fontWeight: FontWeight.bold, height: 1),),                              Text("Level", style: TextStyle(color: AppColors.primary, fontSize: 20, fontWeight: FontWeight.bold, fontFamily: "Itim"),),                            ],                          )                      ),                    ],                  ),                ),                Container(                  width: MediaQuery.sizeOf(context).width/2,                  height: MediaQuery.sizeOf(context).height/2.5,                  child: Column(                    mainAxisAlignment: MainAxisAlignment.center,                    children: [                      SizedBox(height: 220,),                      Container(                        width: MediaQuery.sizeOf(context).width/2,                        padding: EdgeInsets.only(left: 10, right: 10),                        child: LinearProgressIndicator(                          value: (snapshot.data?["exp"]??0) / (snapshot.data?["nextExp"]??100),                          minHeight: 5,                          backgroundColor: Colors.grey[300],                          valueColor: AlwaysStoppedAnimation<Color>(AppColors.primary),                        ),                      ),                      SizedBox(height: 10,),                      Text("${snapshot.data?["exp"]??0}/${snapshot.data?["nextExp"]??100}", textAlign: TextAlign.center, style: TextStyle(color: AppColors.primary),)                    ],                  ),                ),                Column(                  children: [                    SizedBox(height: 65,),                    Container(                      width: MediaQuery.sizeOf(context).width/2,                      child: Row(                        mainAxisAlignment: MainAxisAlignment.center,                        children: [                          Text(snapshot.data?["displayName"]??"", textAlign: TextAlign.center , style: TextStyle(fontSize: 25, fontWeight: FontWeight.bold, color: AppColors.primary),),                        ],                      ),                    ),                  ],                ),                SingleChildScrollView(                  scrollDirection: Axis.vertical,                  child: Column(                    children: [                      SizedBox(height: MediaQuery.sizeOf(context).width-70,),                      Container(                        width: MediaQuery.sizeOf(context).width,                        color: Colors.white,                        child: Column(                          children: [                            SizedBox(height: 40,),                            Row(                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,                              children: [                                Column(                                  children: [                                    Text("${snapshot.data?["countTopic"]??0}", style: TextStyle(fontSize: 50, fontWeight: FontWeight.bold, color: Colors.black, height: 1),),                                    Text(AppLocalizations.of(context)!.profile_topic, style: TextStyle(fontFamily: "Itim", fontWeight: FontWeight.bold, color: Colors.grey[500], fontSize: 20),)                                  ],                                ),                                Column(                                  children: [                                    Text(getTitle(snapshot.data?["Level"]??0), style: TextStyle(fontSize: 30, fontWeight: FontWeight.bold, color: Colors.black, height: 1.7),),                                    Text(AppLocalizations.of(context)!.profile_title, style: TextStyle(fontFamily: "Itim", fontWeight: FontWeight.bold, color: Colors.grey[500], fontSize: 20),)                                  ],                                )                              ],                            ),                            const SizedBox(                              height: 20,                            ),                            Divider(                              color: Colors.grey.shade300, // Màu của đường kẻ                              thickness: 1,                              indent: 50,                              endIndent: 50,// Độ dày                            ),                            SizedBox(height: 20,),                            Container(                              padding: EdgeInsets.all(16),                              decoration: const BoxDecoration(                                  color: Colors.white,                                  boxShadow: [                                    BoxShadow(                                        color: Colors.grey,                                        offset: Offset(2, 2),                                        blurRadius: 10                                    )                                  ],                                  borderRadius: BorderRadius.all(Radius.circular(20))                              ),                              width: MediaQuery.sizeOf(context).width-40,                              child: Column(                                children: [                                  Row(                                    mainAxisAlignment: MainAxisAlignment.center,                                    children: [                                      Text("${snapshot.data!["Streak"]}",                                          style: TextStyle(                                              color: ((snapshot.data!["checkInHistory"]                                              as List<String>)                                                  .contains(                                                  "${today.day.toString().padLeft(2, '0')}/${today.month.toString().padLeft(2, '0')}/${today.year.toString()}"))                                                  ? Colors.orange                                                  : Colors.grey,                                              fontWeight: FontWeight.bold,                                              fontSize: 30)),                                      Icon(                                        Icons.local_fire_department,                                        color: ((snapshot.data!["checkInHistory"]                                        as List<String>)                                            .contains(                                            "${today.day.toString().padLeft(2, '0')}/${today.month.toString().padLeft(2, '0')}/${today.year.toString()}"))                                            ? Colors.orange                                            : Colors.grey,                                        size: 50,                                      )                                    ],                                  ),                                  Text(                                    AppLocalizations.of(context)!.profile_date(int.parse(today.month.toString().padLeft(2, '0')), int.parse(today.year.toString())),                                    style: TextStyle(                                        color: AppColors.primaryLight.withOpacity(0.8),                                        fontWeight: FontWeight.bold,                                        fontSize: 20,                                        fontFamily: "Itim"                                    ),                                  ),                                  Padding(                                    padding: EdgeInsets.all(16),                                    child: Column(                                      children: [                                        Container(                                          width: MediaQuery.sizeOf(context).width,                                          child: Row(                                            mainAxisAlignment:                                            MainAxisAlignment.spaceBetween,                                            children: weekdays.map((day) {                                              return Expanded(                                                child: Center(                                                  child: Text(                                                    day,                                                    style: TextStyle(                                                        fontSize: 20,                                                        fontWeight: FontWeight.bold,                                                        color: AppColors.primaryLight.withOpacity(0.8)),                                                  ),                                                ),                                              );                                            }).toList(),                                          ),                                        ),                                        // Hiển thị ngày theo hàng ngang                                        Container(                                          height: 100,                                          child: GridView.builder(                                            shrinkWrap: true,                                            gridDelegate:                                            const SliverGridDelegateWithFixedCrossAxisCount(                                              crossAxisCount: 7,                                              mainAxisSpacing: 1,// 7 ô theo hàng ngang                                              childAspectRatio: 1.2, // Căn chỉnh tỉ lệ ô                                            ),                                            itemCount: days.length,                                            itemBuilder: (context, index) {                                              bool isToday =                                                  days[index]["date"] == todayFormatted;                                              return Stack(                                                children: [                                                  Container(                                                    margin: EdgeInsets.all(4),                                                    decoration: BoxDecoration(                                                        border: Border.all(                                                            color: isToday                                                                ? Colors.black                                                                : Colors.black                                                                .withOpacity(0.0)),                                                        borderRadius: BorderRadius.all(Radius.circular(10))                                                    ),                                                    child: Center(                                                      child: Text(                                                        days[index]["date"]!,                                                        style: const TextStyle(                                                          color: Colors.black,                                                          fontSize: 18,                                                          fontWeight: FontWeight.bold,                                                        ),                                                      ),                                                    ),                                                  ),                                                  if ((snapshot.data!["checkInHistory"]                                                  as List<String>)                                                      .contains(                                                      daymonthYears[index]["date"]))                                                    Text("🔥"),                                                ],                                              );                                            },                                          ),                                        ),                                      ],                                    ),                                  ),                                ],                              ),                            ),                            SizedBox(height: 100,),                          ],                        ),                      ),                    ],                  ),                ),                Container(                  width: MediaQuery.sizeOf(context).width,                  child: Column(                    crossAxisAlignment: CrossAxisAlignment.end,                    children: [                      SizedBox(height: 60,),                      Row(                        mainAxisAlignment: MainAxisAlignment.end,                        children: [                          //coin                          Container(                            width: 120,                            height: 30,                            decoration: BoxDecoration(                              color: Color(0xFFFFDEDE).withOpacity(0.6),                              borderRadius: BorderRadius.all(Radius.circular(10))                            ),                            child: Center(                              child: Row(                                mainAxisAlignment: MainAxisAlignment.center,                                children: [                                  Text(NumberFormatter.formatHumanReadable(snapshot.data!["coin"]), style: TextStyle(color: AppColors.black, fontSize: 15, fontWeight: FontWeight.bold),),                                  SizedBox(width: 5),                                  Image.asset("assets/kujicoin.png", width: 20, height: 20,),                                ],                              )                            ),                          ),                          IconButton(onPressed: (){                            //go to screen settingScreen with adnimation slide right to left                            Navigator.push(                              context,                              PageRouteBuilder(                                pageBuilder: (context, animation, secondaryAnimation) => settingScreen(changeLanguage: widget.changeLanguage,),                                transitionsBuilder: (context, animation, secondaryAnimation, child) {                                  const begin = Offset(1.0, 0.0);                                  const end = Offset.zero;                                  const curve = Curves.ease;                                  var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));                                  return SlideTransition(                                    position: animation.drive(tween),                                    child: child,                                  );                                },                              ),                            );                          }, icon: Icon(Icons.settings, size:30)),                          SizedBox(width: 20,),                        ],                      )                    ],                  ),                ),              ],            ),          );        })    ), onWillPop: (){return Future.value(false);});  }}