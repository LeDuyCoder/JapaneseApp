import '../../Module/topic.dart';
import '../BaseService.dart';

class TopicService extends BaseService {

  /// Get all topics with limit
  Future<List<topic>> getAllDataTopic(int limit) async {
    final data = await get(
      '/controller/topic/getAllDataTopic.php',
      queryParams: {'limit': limit.toString()},
    );


    if (data["topics"] is List) {
      final List<topic> topics = (data["topics"] as List)
          .map((jsonItem) => topic.fromJson(jsonItem as Map<String, dynamic>))
          .toList();

      print(topics);
      return topics; // ‚úÖ Tr·∫£ v·ªÅ List<topic>
    } else {
      throw Exception('D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá');
    }
  }


  /// Search topics by keyword
  Future<List<topic>> getTopicsSearch(String keyword) async {
    final data = await get('/controller/topic/searchTopic.php',
        queryParams: {'nameTopic': keyword});

    print(data);

    if (data["data"] is List) {
      final List<topic> topics = (data["data"] as List)
          .map((jsonItem) => topic.fromJson(jsonItem as Map<String, dynamic>))
          .toList()
          .cast<topic>(); // √©p ki·ªÉu r√µ r√†ng sang List<topic>

      print(topics);
      return topics;
    } else {
      throw Exception('D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá');
    }
  }


  /// Get topic by ID
  Future<topic?> getDataTopicByID(String id) async {
    try {
      final data = await get('/controller/topic/getDataTopicByTopicID.php',
          queryParams: {'topic_id': id});
      print(data);
      if (data != null) {
        return topic.fromJson(data["data"]);
      }
      return null;
    } catch (e) {
      //print('L·ªói khi k·∫øt n·ªëi ƒë·∫øn server: $e');
      return null;
    }
  }

  /// Insert new topic
  Future<bool> insertTopic(topic topicInsert) async {
    try {
      // G·ª≠i d·ªØ li·ªáu d·∫°ng form ƒë·∫øn API
      final response = await postForm(
        '/controller/topic/insertDataTopic.php',
        topicInsert.toJson(),
      );

      print('üì® Response from API: $response');

      // Ki·ªÉm tra d·ªØ li·ªáu ph·∫£n h·ªìi h·ª£p l·ªá
      if (response is Map<String, dynamic>) {
        final message = response['message'] ?? '';
        final status = response['status'] ?? '';

        // So kh·ªõp v·ªõi th√¥ng b√°o PHP th·∫≠t ("‚úÖ Topic created successfully.")
        if (status == 'success' && message.contains('Topic created successfully')) {
          print('‚úÖ Insert topic success');
          return true;
        } else if (response.containsKey('error')) {
          print('‚ö†Ô∏è API Error: ${response['error']}');
          return false;
        } else {
          print('‚ö†Ô∏è Unexpected API response: $response');
        }
      } else {
        print('‚ö†Ô∏è Invalid response type: $response');
      }

      return false;
    } catch (e, stackTrace) {
      print('‚ùå Exception while inserting topic: $e');
      print(stackTrace);
      return false;
    }
  }



  /// Delete topic by ID
  Future<void> deleteTopic(String topicID) async {
    final data = await postJson('/controller/topic/deleteTopic.php', {
      'topicID': topicID,
    });
    print(data);
    print("‚úÖ Delete success: ${data['message']}");
  }
}